{
    "data": {
      "CAPA": {
        "tactics": [
          {
            "id": "TA0007",
            "name": "Discovery",
            "link": "https://attack.mitre.org/tactics/TA0007/",
            "description": "The adversary is trying to figure out your environment.\n\nDiscovery consists of techniques an adversary may use to gain knowledge about the system and internal network. These techniques help adversaries observe the environment and orient themselves before deciding how to act. They also allow adversaries to explore what they can control and whatâ€™s around their entry point in order to discover how it could benefit their current objective. Native operating system tools are often used toward this post-compromise information-gathering objective. ",
            "techniques": [
              {
                "id": "T1083",
                "name": "File and Directory Discovery",
                "link": "https://attack.mitre.org/techniques/T1083/",
                "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate. Custom tools may also be used to gather file and directory information and interact with the Native API. Adversaries may also leverage a Network Device CLI on network devices to gather file and directory information (e.g. dir, show flash, and/or nvram).",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "get common file path"
                  }
                ]
              },
              {
                "id": "T1497.001",
                "name": "System Checks",
                "link": "https://attack.mitre.org/techniques/T1497/001/",
                "description": "Adversaries may employ various system checks to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors.\nSpecific checks will vary based on the target and/or adversary, but may involve behaviors such as Windows Management Instrumentation, PowerShell, System Information Discovery, and Query Registry to obtain system information and search for VME artifacts. Adversaries may search for VME artifacts in memory, processes, file system, hardware, and/or the Registry. Adversaries may use scripting to automate these checks  into one script and then have the program exit if it determines the system to be a virtual environment. \nChecks could include generic system properties such as host/domain name and samples of network traffic. Adversaries may also check the network adapters addresses, CPU core count, and available memory/drive size. \nOther common checks may enumerate services running that are unique to these applications, installed programs on the system, manufacturer/product fields for strings relating to virtual machine applications, and VME-specific hardware/processor instructions. In applications like VMWare, adversaries can also use a special I/O port to send commands and receive output. \nHardware checks, such as the presence of the fan, temperature, and audio devices, could also be used to gather evidence that can be indicative a virtual environment. Adversaries may also query for specific readings from these devices.",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "reference anti-VM strings"
                  }
                ]
              }
            ]
          },
          {
            "id": "TA0002",
            "name": "Execution",
            "link": "https://attack.mitre.org/tactics/TA0002/",
            "description": "The adversary is trying to run malicious code.\n\nExecution consists of techniques that result in adversary-controlled code running on a local or remote system. Techniques that run malicious code are often paired with techniques from all other tactics to achieve broader goals, like exploring a network or stealing data. For example, an adversary might use a remote access tool to run a PowerShell script that does Remote System Discovery. ",
            "techniques": [
              {
                "id": "T1129",
                "name": "Shared Modules",
                "link": "https://attack.mitre.org/techniques/T1129/",
                "description": "Adversaries may execute malicious payloads via loading shared modules. Shared modules are executable files that are loaded into processes to provide access to reusable code, such as specific custom functions or invoking OS API functions (i.e., Native API).\nAdversaries may use this functionality as a way to execute arbitrary payloads on a victim system. For example, adversaries can modularize functionality of their malware into shared objects that perform various functions such as managing C2 network communications or execution of specific actions on objective.\nThe Linux & macOS module loader can load and execute shared objects from arbitrary local paths. This functionality resides in dlfcn.h in functions such as dlopen and dlsym. Although macOS can execute .so files, common practice uses .dylib files.\nThe Windows module loader can be instructed to load DLLs from arbitrary local paths and arbitrary Universal Naming Convention (UNC) network paths. This functionality resides in NTDLL.dll and is part of the Windows Native API which is called from functions like LoadLibrary at run time.",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "link function at runtime on Windows"
                  }
                ]
              },
              {
                "id": "T1569.002",
                "name": "Service Execution",
                "link": "https://attack.mitre.org/techniques/T1569/002/",
                "description": "Adversaries may abuse the Windows service control manager to execute malicious commands or payloads. The Windows service control manager (services.exe) is an interface to manage and manipulate services. The service control manager is accessible to users via GUI components as well as system utilities such as sc.exe and Net.\nPsExec can also be used to execute commands or payloads via a temporary Windows service created through the service control manager API. Tools such as PsExec and sc.exe can accept remote servers as arguments and may be used to conduct remote execution.\nAdversaries may leverage these mechanisms to execute malicious content. This can be done by either executing a new or modified service. This technique is the execution used in conjunction with Windows Service during service persistence or privilege escalation.",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "modify service"
                  },
                  {
                    "severity": "INFO",
                    "description": "persist via Windows service"
                  }
                ]
              }
            ]
          },
          {
            "id": "TA0003",
            "name": "Persistence",
            "link": "https://attack.mitre.org/tactics/TA0003/",
            "description": "The adversary is trying to maintain their foothold.\n\nPersistence consists of techniques that adversaries use to keep access to systems across restarts, changed credentials, and other interruptions that could cut off their access. Techniques used for persistence include any access, action, or configuration changes that let them maintain their foothold on systems, such as replacing or hijacking legitimate code or adding startup code. ",
            "techniques": [
              {
                "id": "T1543.003",
                "name": "Windows Service",
                "link": "https://attack.mitre.org/techniques/T1543/003/",
                "description": "Adversaries may create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions. Windows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Windows Registry.\nAdversaries may install a new service or modify an existing service to execute at startup in order to persist on a system. Service configurations can be set or modified using system utilities (such as sc.exe), by directly modifying the Registry, or by interacting directly with the Windows API. \nAdversaries may also use services to install and execute malicious drivers. For example, after dropping a driver file (ex: .sys) to disk, the payload can be loaded and registered via Native API functions such as CreateServiceW() (or manually via functions such as ZwLoadDriver() and ZwSetValueKey()), by creating the required service Registry values (i.e. Modify Registry), or by using command-line utilities such as PnPUtil.exe. Adversaries may leverage these drivers as Rootkits to hide the presence of malicious activity on a system. Adversaries may also load a signed yet vulnerable driver onto a compromised machine (known as \"Bring Your Own Vulnerable Driver\" (BYOVD)) as part of Exploitation for Privilege Escalation.\nServices may be created with administrator privileges but are executed under SYSTEM privileges, so an adversary may also use a service to escalate privileges. Adversaries may also directly start services through Service Execution. To make detection analysis more challenging, malicious services may also incorporate Masquerade Task or Service (ex: using a service and/or payload name related to a legitimate OS or benign software component).",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "start service"
                  },
                  {
                    "severity": "INFO",
                    "description": "stop service"
                  },
                  {
                    "severity": "INFO",
                    "description": "modify service"
                  },
                  {
                    "severity": "INFO",
                    "description": "persist via Windows service"
                  },
                  {
                    "severity": "INFO",
                    "description": "continue service"
                  },
                  {
                    "severity": "INFO",
                    "description": "pause service"
                  }
                ]
              }
            ]
          },
          {
            "id": "TA0004",
            "name": "Privilege Escalation",
            "link": "https://attack.mitre.org/tactics/TA0004/",
            "description": "The adversary is trying to gain higher-level permissions.\n\nPrivilege Escalation consists of techniques that adversaries use to gain higher-level permissions on a system or network. Adversaries can often enter and explore a network with unprivileged access but require elevated permissions to follow through on their objectives. Common approaches are to take advantage of system weaknesses, misconfigurations, and vulnerabilities. Examples of elevated access include: \n\n* SYSTEM/root level\n* local administrator\n* user account with admin-like access \n* user accounts with access to specific system or perform specific function\n\nThese techniques often overlap with Persistence techniques, as OS features that let an adversary persist can execute in an elevated context.  ",
            "techniques": [
              {
                "id": "T1543.003",
                "name": "Windows Service",
                "link": "https://attack.mitre.org/techniques/T1543/003/",
                "description": "Adversaries may create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions. Windows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Windows Registry.\nAdversaries may install a new service or modify an existing service to execute at startup in order to persist on a system. Service configurations can be set or modified using system utilities (such as sc.exe), by directly modifying the Registry, or by interacting directly with the Windows API. \nAdversaries may also use services to install and execute malicious drivers. For example, after dropping a driver file (ex: .sys) to disk, the payload can be loaded and registered via Native API functions such as CreateServiceW() (or manually via functions such as ZwLoadDriver() and ZwSetValueKey()), by creating the required service Registry values (i.e. Modify Registry), or by using command-line utilities such as PnPUtil.exe. Adversaries may leverage these drivers as Rootkits to hide the presence of malicious activity on a system. Adversaries may also load a signed yet vulnerable driver onto a compromised machine (known as \"Bring Your Own Vulnerable Driver\" (BYOVD)) as part of Exploitation for Privilege Escalation.\nServices may be created with administrator privileges but are executed under SYSTEM privileges, so an adversary may also use a service to escalate privileges. Adversaries may also directly start services through Service Execution. To make detection analysis more challenging, malicious services may also incorporate Masquerade Task or Service (ex: using a service and/or payload name related to a legitimate OS or benign software component).",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "start service"
                  },
                  {
                    "severity": "INFO",
                    "description": "stop service"
                  },
                  {
                    "severity": "INFO",
                    "description": "modify service"
                  },
                  {
                    "severity": "INFO",
                    "description": "persist via Windows service"
                  },
                  {
                    "severity": "INFO",
                    "description": "continue service"
                  },
                  {
                    "severity": "INFO",
                    "description": "pause service"
                  }
                ]
              }
            ]
          },
          {
            "id": "TA0034",
            "name": "Impact",
            "link": "https://attack.mitre.org/tactics/TA0034/",
            "description": "The adversary is trying to manipulate, interrupt, or destroy your devices and data.\n\nThe impact tactic consists of techniques used by the adversary to execute his or her mission objectives but that do not cleanly fit into another category such as Collection. Mission objectives vary based on each adversary's goals, but examples include toll fraud, destruction of device data, or locking the user out of his or her device until a ransom is paid.",
            "techniques": [
              {
                "id": "T1489",
                "name": "Service Stop",
                "link": "https://attack.mitre.org/techniques/T1489/",
                "description": "Adversaries may stop or disable services on a system to render those services unavailable to legitimate users. Stopping critical services or processes can inhibit or stop response to an incident or aid in the adversary's overall objectives to cause damage to the environment. \nAdversaries may accomplish this by disabling individual services of high importance to an organization, such as MSExchangeIS, which will make Exchange content inaccessible . In some cases, adversaries may stop or disable many or all services to render systems unusable. Services or processes may not allow for modification of their data stores while running. Adversaries may stop services or processes in order to conduct Data Destruction or Data Encrypted for Impact on the data stores of services like Exchange and SQL Server.",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "stop service"
                  }
                ]
              }
            ]
          },
          {
            "id": "TA0040",
            "name": "Impact",
            "link": "https://attack.mitre.org/tactics/TA0040/",
            "description": "The adversary is trying to manipulate, interrupt, or destroy your systems and data.\n \nImpact consists of techniques that adversaries use to disrupt availability or compromise integrity by manipulating business and operational processes. Techniques used for impact can include destroying or tampering with data. In some cases, business processes can look fine, but may have been altered to benefit the adversariesâ€™ goals. These techniques might be used by adversaries to follow through on their end goal or to provide cover for a confidentiality breach.",
            "techniques": [
              {
                "id": "T1489",
                "name": "Service Stop",
                "link": "https://attack.mitre.org/techniques/T1489/",
                "description": "Adversaries may stop or disable services on a system to render those services unavailable to legitimate users. Stopping critical services or processes can inhibit or stop response to an incident or aid in the adversary's overall objectives to cause damage to the environment. \nAdversaries may accomplish this by disabling individual services of high importance to an organization, such as MSExchangeIS, which will make Exchange content inaccessible . In some cases, adversaries may stop or disable many or all services to render systems unusable. Services or processes may not allow for modification of their data stores while running. Adversaries may stop services or processes in order to conduct Data Destruction or Data Encrypted for Impact on the data stores of services like Exchange and SQL Server.",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "stop service"
                  }
                ]
              }
            ]
          },
          {
            "id": "TA0005",
            "name": "Defense Evasion",
            "link": "https://attack.mitre.org/tactics/TA0005/",
            "description": "The adversary is trying to avoid being detected.\n\nDefense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tacticsâ€™ techniques are cross-listed here when those techniques include the added benefit of subverting defenses. ",
            "techniques": [
              {
                "id": "T1497.001",
                "name": "System Checks",
                "link": "https://attack.mitre.org/techniques/T1497/001/",
                "description": "Adversaries may employ various system checks to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors.\nSpecific checks will vary based on the target and/or adversary, but may involve behaviors such as Windows Management Instrumentation, PowerShell, System Information Discovery, and Query Registry to obtain system information and search for VME artifacts. Adversaries may search for VME artifacts in memory, processes, file system, hardware, and/or the Registry. Adversaries may use scripting to automate these checks  into one script and then have the program exit if it determines the system to be a virtual environment. \nChecks could include generic system properties such as host/domain name and samples of network traffic. Adversaries may also check the network adapters addresses, CPU core count, and available memory/drive size. \nOther common checks may enumerate services running that are unique to these applications, installed programs on the system, manufacturer/product fields for strings relating to virtual machine applications, and VME-specific hardware/processor instructions. In applications like VMWare, adversaries can also use a special I/O port to send commands and receive output. \nHardware checks, such as the presence of the fan, temperature, and audio devices, could also be used to gather evidence that can be indicative a virtual environment. Adversaries may also query for specific readings from these devices.",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "reference anti-VM strings"
                  }
                ]
              }
            ]
          }
        ]
      },
      "Yomi Hunter": {
        "tactics": [
          {
            "id": "TA0005",
            "name": "Defense Evasion",
            "link": "https://attack.mitre.org/tactics/TA0005/",
            "description": "The adversary is trying to avoid being detected.\n\nDefense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tacticsâ€™ techniques are cross-listed here when those techniques include the added benefit of subverting defenses. ",
            "techniques": [
              {
                "id": "T1112",
                "name": "Modify Registry",
                "link": "https://attack.mitre.org/techniques/T1112/",
                "description": "Adversaries may interact with the Windows Registry to hide configuration information within Registry keys, remove information as part of cleaning up, or as part of other techniques to aid in persistence and execution.\nAccess to specific areas of the Registry depends on account permissions, some requiring administrator-level access. The built-in Windows command-line utility Reg may be used for local or remote Registry modification.  Other tools may also be used, such as a remote access tool, which may contain functionality to interact with the Registry through the Windows API.\nRegistry modifications may also include actions to hide keys, such as prepending key names with a null character, which will cause an error and/or be ignored when read via Reg or other utilities using the Win32 API.  Adversaries may abuse these pseudo-hidden keys to conceal payloads/commands used to maintain persistence.  \nThe Registry of a remote system may be modified to aid in execution of files as part of lateral movement. It requires the remote Registry service to be running on the target system.  Often Valid Accounts are required, along with access to the remote system's SMB/Windows Admin Shares for RPC communication.",
                "signatures": [
                  {
                    "severity": "UNKNOWN",
                    "description": "The process has tried to set its autorun on the system startup"
                  }
                ]
              }
            ]
          }
        ]
      },
      "Zenbox": {
        "tactics": [
          {
            "id": "TA0003",
            "name": "Persistence",
            "link": "https://attack.mitre.org/tactics/TA0003/",
            "description": "The adversary is trying to maintain their foothold.\n\nPersistence consists of techniques that adversaries use to keep access to systems across restarts, changed credentials, and other interruptions that could cut off their access. Techniques used for persistence include any access, action, or configuration changes that let them maintain their foothold on systems, such as replacing or hijacking legitimate code or adding startup code. ",
            "techniques": [
              {
                "id": "T1543.003",
                "name": "Windows Service",
                "link": "https://attack.mitre.org/techniques/T1543/003/",
                "description": "Adversaries may create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions. Windows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Windows Registry.\nAdversaries may install a new service or modify an existing service to execute at startup in order to persist on a system. Service configurations can be set or modified using system utilities (such as sc.exe), by directly modifying the Registry, or by interacting directly with the Windows API. \nAdversaries may also use services to install and execute malicious drivers. For example, after dropping a driver file (ex: .sys) to disk, the payload can be loaded and registered via Native API functions such as CreateServiceW() (or manually via functions such as ZwLoadDriver() and ZwSetValueKey()), by creating the required service Registry values (i.e. Modify Registry), or by using command-line utilities such as PnPUtil.exe. Adversaries may leverage these drivers as Rootkits to hide the presence of malicious activity on a system. Adversaries may also load a signed yet vulnerable driver onto a compromised machine (known as \"Bring Your Own Vulnerable Driver\" (BYOVD)) as part of Exploitation for Privilege Escalation.\nServices may be created with administrator privileges but are executed under SYSTEM privileges, so an adversary may also use a service to escalate privileges. Adversaries may also directly start services through Service Execution. To make detection analysis more challenging, malicious services may also incorporate Masquerade Task or Service (ex: using a service and/or payload name related to a legitimate OS or benign software component).",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "Creates or modifies windows services"
                  },
                  {
                    "severity": "INFO",
                    "description": "Modifies existing windows services"
                  }
                ]
              }
            ]
          },
          {
            "id": "TA0004",
            "name": "Privilege Escalation",
            "link": "https://attack.mitre.org/tactics/TA0004/",
            "description": "The adversary is trying to gain higher-level permissions.\n\nPrivilege Escalation consists of techniques that adversaries use to gain higher-level permissions on a system or network. Adversaries can often enter and explore a network with unprivileged access but require elevated permissions to follow through on their objectives. Common approaches are to take advantage of system weaknesses, misconfigurations, and vulnerabilities. Examples of elevated access include: \n\n* SYSTEM/root level\n* local administrator\n* user account with admin-like access \n* user accounts with access to specific system or perform specific function\n\nThese techniques often overlap with Persistence techniques, as OS features that let an adversary persist can execute in an elevated context.  ",
            "techniques": [
              {
                "id": "T1543.003",
                "name": "Windows Service",
                "link": "https://attack.mitre.org/techniques/T1543/003/",
                "description": "Adversaries may create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions. Windows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Windows Registry.\nAdversaries may install a new service or modify an existing service to execute at startup in order to persist on a system. Service configurations can be set or modified using system utilities (such as sc.exe), by directly modifying the Registry, or by interacting directly with the Windows API. \nAdversaries may also use services to install and execute malicious drivers. For example, after dropping a driver file (ex: .sys) to disk, the payload can be loaded and registered via Native API functions such as CreateServiceW() (or manually via functions such as ZwLoadDriver() and ZwSetValueKey()), by creating the required service Registry values (i.e. Modify Registry), or by using command-line utilities such as PnPUtil.exe. Adversaries may leverage these drivers as Rootkits to hide the presence of malicious activity on a system. Adversaries may also load a signed yet vulnerable driver onto a compromised machine (known as \"Bring Your Own Vulnerable Driver\" (BYOVD)) as part of Exploitation for Privilege Escalation.\nServices may be created with administrator privileges but are executed under SYSTEM privileges, so an adversary may also use a service to escalate privileges. Adversaries may also directly start services through Service Execution. To make detection analysis more challenging, malicious services may also incorporate Masquerade Task or Service (ex: using a service and/or payload name related to a legitimate OS or benign software component).",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "Creates or modifies windows services"
                  },
                  {
                    "severity": "INFO",
                    "description": "Modifies existing windows services"
                  }
                ]
              },
              {
                "id": "T1055",
                "name": "Process Injection",
                "link": "https://attack.mitre.org/techniques/T1055/",
                "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "Spawns processes"
                  },
                  {
                    "severity": "HIGH",
                    "description": "System process connects to network (likely due to code injection)"
                  }
                ]
              }
            ]
          },
          {
            "id": "TA0005",
            "name": "Defense Evasion",
            "link": "https://attack.mitre.org/tactics/TA0005/",
            "description": "The adversary is trying to avoid being detected.\n\nDefense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tacticsâ€™ techniques are cross-listed here when those techniques include the added benefit of subverting defenses. ",
            "techniques": [
              {
                "id": "T1036",
                "name": "Masquerading",
                "link": "https://attack.mitre.org/techniques/T1036/",
                "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading. Masquerading may also include the use of Proxy or VPNs to disguise IP addresses, which can allow adversaries to blend in with normal network traffic and bypass conditional access policies or anti-abuse protections.",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "Drops PE files to the windows directory (C:\\\\Windows)"
                  },
                  {
                    "severity": "INFO",
                    "description": "Drops files with a non matching file extension (content does not match to file extension)"
                  },
                  {
                    "severity": "INFO",
                    "description": "Creates files inside the system directory"
                  }
                ]
              },
              {
                "id": "T1055",
                "name": "Process Injection",
                "link": "https://attack.mitre.org/techniques/T1055/",
                "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "Spawns processes"
                  },
                  {
                    "severity": "HIGH",
                    "description": "System process connects to network (likely due to code injection)"
                  }
                ]
              },
              {
                "id": "T1497",
                "name": "Virtualization/Sandbox Evasion",
                "link": "https://attack.mitre.org/techniques/T1497/",
                "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors.\nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "May sleep (evasive loops) to hinder dynamic analysis"
                  },
                  {
                    "severity": "INFO",
                    "description": "Queries disk information (often used to detect virtual machines)"
                  }
                ]
              },
              {
                "id": "T1070.004",
                "name": "File Deletion",
                "link": "https://attack.mitre.org/techniques/T1070/004/",
                "description": "Adversaries may delete files left behind by the actions of their intrusion activity. Malware, tools, or other non-native files dropped or created on a system by an adversary (ex: Ingress Tool Transfer) may leave traces to indicate to what was done within a network and how. Removal of these files can occur during an intrusion, or as part of a post-intrusion process to minimize the adversary's footprint.\nThere are tools available from the host operating system to perform cleanup, but adversaries may use other tools as well. Examples of built-in Command and Scripting Interpreter functions include del on Windows and rm or unlink on Linux and macOS.",
                "signatures": [
                  {
                    "severity": "LOW",
                    "description": "Deletes itself after installation"
                  }
                ]
              }
            ]
          },
          {
            "id": "TA0007",
            "name": "Discovery",
            "link": "https://attack.mitre.org/tactics/TA0007/",
            "description": "The adversary is trying to figure out your environment.\n\nDiscovery consists of techniques an adversary may use to gain knowledge about the system and internal network. These techniques help adversaries observe the environment and orient themselves before deciding how to act. They also allow adversaries to explore what they can control and whatâ€™s around their entry point in order to discover how it could benefit their current objective. Native operating system tools are often used toward this post-compromise information-gathering objective. ",
            "techniques": [
              {
                "id": "T1082",
                "name": "System Information Discovery",
                "link": "https://attack.mitre.org/techniques/T1082/",
                "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the systemsetup configuration tool on macOS. As an example, adversaries with user-level access can execute the df -aH command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information (e.g. show version). System Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "Reads software policies"
                  },
                  {
                    "severity": "INFO",
                    "description": "Queries disk information (often used to detect virtual machines)"
                  },
                  {
                    "severity": "INFO",
                    "description": "Queries the volume information (name, serial number etc) of a device"
                  }
                ]
              },
              {
                "id": "T1497",
                "name": "Virtualization/Sandbox Evasion",
                "link": "https://attack.mitre.org/techniques/T1497/",
                "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors.\nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "May sleep (evasive loops) to hinder dynamic analysis"
                  },
                  {
                    "severity": "INFO",
                    "description": "Queries disk information (often used to detect virtual machines)"
                  }
                ]
              },
              {
                "id": "T1057",
                "name": "Process Discovery",
                "link": "https://attack.mitre.org/techniques/T1057/",
                "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.\nOn network devices, Network Device CLI commands such as show processes can be used to display current running processes.",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "Queries a list of all running processes"
                  }
                ]
              },
              {
                "id": "T1018",
                "name": "Remote System Discovery",
                "link": "https://attack.mitre.org/techniques/T1018/",
                "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or net view using Net.\nAdversaries may also analyze data from local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) or other passive means (such as local Arp cache entries) in order to discover the presence of remote systems in an environment.\nAdversaries may also target discovery of network infrastructure as well as leverage Network Device CLI commands on network devices to gather detailed information about systems within a network (e.g. show cdp neighbors, show arp).  ",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "Reads the hosts file"
                  }
                ]
              },
              {
                "id": "T1518.001",
                "name": "Security Software Discovery",
                "link": "https://attack.mitre.org/techniques/T1518/001/",
                "description": "Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as firewall rules and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nExample commands that can be used to obtain security software information are netsh, reg query with Reg, dir with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.\nAdversaries may also utilize cloud APIs to discover the configurations of firewall rules within an environment. For example, the permitted IP ranges, ports or user accounts for the inbound/outbound rules of security groups, virtual firewalls established within AWS for EC2 and/or VPC instances, can be revealed by the DescribeSecurityGroups action with various request parameters. ",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "Queries disk information (often used to detect virtual machines)"
                  },
                  {
                    "severity": "INFO",
                    "description": "May try to detect the virtual machine to hinder analysis (VM artifact strings found in memory)"
                  }
                ]
              }
            ]
          },
          {
            "id": "TA0011",
            "name": "Command and Control",
            "link": "https://attack.mitre.org/tactics/TA0011/",
            "description": "The adversary is trying to communicate with compromised systems to control them.\n\nCommand and Control consists of techniques that adversaries may use to communicate with systems under their control within a victim network. Adversaries commonly attempt to mimic normal, expected traffic to avoid detection. There are many ways an adversary can establish command and control with various levels of stealth depending on the victimâ€™s network structure and defenses.",
            "techniques": [
              {
                "id": "T1095",
                "name": "Non-Application Layer Protocol",
                "link": "https://attack.mitre.org/techniques/T1095/",
                "description": "Adversaries may use an OSI non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example. Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts. However, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "Performs DNS lookups"
                  }
                ]
              },
              {
                "id": "T1071",
                "name": "Application Layer Protocol",
                "link": "https://attack.mitre.org/techniques/T1071/",
                "description": "Adversaries may communicate using OSI application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "Performs DNS lookups"
                  }
                ]
              },
              {
                "id": "T1571",
                "name": "Non-Standard Port",
                "link": "https://attack.mitre.org/techniques/T1571/",
                "description": "Adversaries may communicate using a protocol and port pairing that are typically not associated. For example, HTTPS over port 8088 or port 587 as opposed to the traditional port 443. Adversaries may make changes to the standard port used by a protocol to bypass filtering or muddle analysis/parsing of network data.\nAdversaries may also make changes to victim systems to abuse non-standard ports. For example, Registry keys and other configuration settings can be used to modify protocol and port pairings.",
                "signatures": [
                  {
                    "severity": "INFO",
                    "description": "Detected TCP or UDP traffic on non-standard ports"
                  }
                ]
              }
            ]
          }
        ]
      }
    },
    "links": {
      "self": "https://www.virustotal.com/api/v3/files/09a1c17ac55cde962b4f3bcd61140d752d86362296ee74736000a6a647c73d8c/behaviour_mitre_trees"
    }
  }